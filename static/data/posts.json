[
    {
        "id": 1,
        "title": "New Website Framework",
        "date": "2025-07-30",
        "image": "splash-bg.jpg",
        "blocks": [
            {
                "blockType": 1,
                "content": "Due to the rising cost of simple shared hosting (BlueHost), I've written my own lightweight implementation of WordPress from scratch in React and hosted it on GitHub Pages."
            }
        ],
        "tags": [
            "code",
            "hobby"
        ]
    },
    {
        "id": 3,
        "title": "Remove EFI System Partition From a Hard Drive",
        "date": "2025-07-29",
        "image": "sysadmin.png",
        "blocks": [
            {
                "blockType": 3,
                "content": "diskpart\nlist disk\nselect disk <the disk number>\nclean"
            }
        ],
        "tags": [
            "sysadmin"
        ]
    },
    {
        "id": 4,
        "title": "Check When Active Directory Password Expires",
        "date": "2024-06-25",
        "image": "sysadmin.png",
        "blocks": [
            {
                "blockType": 3,
                "content": "net user /domain <username> | findstr /i expires"
            }
        ],
        "tags": [
            "sysadmin"
        ]
    },
    {
        "id": 6,
        "title": "Repeat an Observable in Angular (rxjs)",
        "date": "1/22/2024",
        "image": "post.1.png",
        "blocks": [
            {
                "content": "interval(1000).subscribe(() => {\n\tthis._getLatest().subscribe(latest => {\n\t});\n});",
                "blockType": 3
            }
        ],
        "tags": [
            "code",
            "angular"
        ]
    },
    {
        "id": 7,
        "title": "Home Dashboard",
        "date": "3/19/2024",
        "image": "dash_001.jpg",
        "blocks": [
            {
                "content": "Custom Smart Home Interface.",
                "blockType": 1
            },
            {
                "blockType": 1,
                "content": "This fully custom web application runs on my local IIS server and is displayed via a Raspberry Pi with a touchscreen. Built with Angular Material and a .NET backend, it serves as a centralized smart home dashboard, integrating seamlessly with multiple IoT APIs:"
            },
            {
                "blockType": 3,
                "content": "- Philips Hue\n- Samsung SmartThings\n- Hydrawise\n- OpenMeteo\n- Roku"
            },
            {
                "blockType": 1,
                "content": "The project showcases real-time device control, environmental monitoring, and media interaction — all through a sleek, responsive interface. It’s a hands-on blend of frontend design, backend integration, and hardware deployment that turns a Raspberry Pi into a powerful home automation hub."
            },
            {
                "content": "dash_001.jpg",
                "blockType": 2
            },
            {
                "content": "dash_002.jpg",
                "blockType": 2
            },
            {
                "content": "dash_003.jpg",
                "blockType": 2
            },
            {
                "content": "dash_004.jpg",
                "blockType": 2
            },
            {
                "content": "dash_005.jpg",
                "blockType": 2
            },
            {
                "content": "dash_006.jpg",
                "blockType": 2
            },
            {
                "content": "dash_007.jpg",
                "blockType": 2
            },
            {
                "content": "dash_008.jpg",
                "blockType": 2
            }
        ],
        "tags": [
            "hobby",
            "raspberrypi"
        ]
    },
    {
        "id": 8,
        "title": "Lego Deals",
        "date": "1/1/2024",
        "image": "legodeals_001.jpg",
        "blocks": [
            {
                "content": "This application displays the current prices of Lego sets at major retailers. Every hour, a scheduled task scrapes 29 retailer websites for their discounted Lego sets, and those prices are saved to a database. I started collecting the hourly price history in December 2022 and it continues to run today. I'm able to set alerts via Telegram when the price of a particular set drops below a given threshold. The application also keeps track of which sets I already own, which ones I am interested in, and which ones I never want to see. I can switch to a view that only shows sets I care about.",
                "blockType": 1
            },
            {
                "content": "Lego set details, like number of pieces, are pulled from Rebrickable's daily dataset. Once per day, a scheduled task downloads the latest Rebrickable dataset and adds the new entries to my database. MSRP is scraped from the Lego website and the BestBuy API. BestBuy has the best API of all the retailers. And it's FREE!",
                "blockType": 1
            },
            {
                "content": "Another page in the application displays Ebay buy-it-now, free shipping listings. Due to inconsistency with Ebay data, these prices are not tracked in my database. Ebay deals are displayed on a totally separate page from the retailer listings; however, the Ebay page can be filtered by the same criteria.",
                "blockType": 1
            },
            {
                "content": "The backend, dotnet API and Angular application are hosted on a local IIS server. Several scheduled tasks, like MSRP updates, Rebrickable datasets, alerts, etc. run on the same server. The MySQL database is hosted on Bluehost.",
                "blockType": 1
            },
            {
                "content": "legodeals_001.jpg",
                "blockType": 2
            },
            {
                "content": "legodeals_002.jpg",
                "blockType": 2
            }
        ],
        "tags": [
            "hobby"
        ]
    },
    {
        "id": 9,
        "title": "Insert into a SQL table that only has auto-generated Columns",
        "date": "12/5/2023",
        "image": "",
        "blocks": [
            {
                "content": "INSERT INTO table_name DEFAULT VALUES",
                "blockType": 3
            }
        ],
        "tags": [
            "sql"
        ]
    }
]